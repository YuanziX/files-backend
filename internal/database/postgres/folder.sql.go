// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: folder.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFolder = `-- name: CreateFolder :one
INSERT INTO folders (owner_id, parent_id, name)
VALUES ($1, $2, $3)
RETURNING id, owner_id, parent_id, name, created_at
`

type CreateFolderParams struct {
	OwnerID  pgtype.UUID `json:"owner_id"`
	ParentID pgtype.UUID `json:"parent_id"`
	Name     string      `json:"name"`
}

func (q *Queries) CreateFolder(ctx context.Context, arg CreateFolderParams) (Folder, error) {
	row := q.db.QueryRow(ctx, createFolder, arg.OwnerID, arg.ParentID, arg.Name)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ParentID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getFolderByID = `-- name: GetFolderByID :one
SELECT id, owner_id, parent_id, name, created_at FROM folders
WHERE id = $1 AND owner_id = $2
`

type GetFolderByIDParams struct {
	ID      pgtype.UUID `json:"id"`
	OwnerID pgtype.UUID `json:"owner_id"`
}

func (q *Queries) GetFolderByID(ctx context.Context, arg GetFolderByIDParams) (Folder, error) {
	row := q.db.QueryRow(ctx, getFolderByID, arg.ID, arg.OwnerID)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ParentID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const listRootFoldersByOwner = `-- name: ListRootFoldersByOwner :many
SELECT id, owner_id, parent_id, name, created_at FROM folders
WHERE owner_id = $1 AND parent_id IS NULL
ORDER BY name
`

func (q *Queries) ListRootFoldersByOwner(ctx context.Context, ownerID pgtype.UUID) ([]Folder, error) {
	rows, err := q.db.Query(ctx, listRootFoldersByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Folder
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ParentID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubfoldersByParent = `-- name: ListSubfoldersByParent :many
SELECT id, owner_id, parent_id, name, created_at FROM folders
WHERE owner_id = $1 AND parent_id = $2
ORDER BY name
`

type ListSubfoldersByParentParams struct {
	OwnerID  pgtype.UUID `json:"owner_id"`
	ParentID pgtype.UUID `json:"parent_id"`
}

func (q *Queries) ListSubfoldersByParent(ctx context.Context, arg ListSubfoldersByParentParams) ([]Folder, error) {
	rows, err := q.db.Query(ctx, listSubfoldersByParent, arg.OwnerID, arg.ParentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Folder
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ParentID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
