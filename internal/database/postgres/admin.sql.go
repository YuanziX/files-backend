// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: admin.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAllFilesForAdmin = `-- name: CountAllFilesForAdmin :one
SELECT COUNT(*) FROM files
`

func (q *Queries) CountAllFilesForAdmin(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllFilesForAdmin)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllFilesForAdmin = `-- name: GetAllFilesForAdmin :many
SELECT
    f.id, f.filename, f.upload_date, f.download_count, f.owner_id,
    pf.mime_type, pf.size_bytes
FROM files f
JOIN physical_files pf ON f.physical_file_id = pf.id
ORDER BY f.upload_date DESC
LIMIT $1 OFFSET $2
`

type GetAllFilesForAdminParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllFilesForAdminRow struct {
	ID            pgtype.UUID        `json:"id"`
	Filename      string             `json:"filename"`
	UploadDate    pgtype.Timestamptz `json:"upload_date"`
	DownloadCount int32              `json:"download_count"`
	OwnerID       pgtype.UUID        `json:"owner_id"`
	MimeType      string             `json:"mime_type"`
	SizeBytes     int64              `json:"size_bytes"`
}

func (q *Queries) GetAllFilesForAdmin(ctx context.Context, arg GetAllFilesForAdminParams) ([]GetAllFilesForAdminRow, error) {
	rows, err := q.db.Query(ctx, getAllFilesForAdmin, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFilesForAdminRow
	for rows.Next() {
		var i GetAllFilesForAdminRow
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.UploadDate,
			&i.DownloadCount,
			&i.OwnerID,
			&i.MimeType,
			&i.SizeBytes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
