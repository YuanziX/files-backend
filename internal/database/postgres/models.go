// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ShareType string

const (
	ShareTypeUser   ShareType = "user"
	ShareTypePublic ShareType = "public"
)

func (e *ShareType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ShareType(s)
	case string:
		*e = ShareType(s)
	default:
		return fmt.Errorf("unsupported scan type for ShareType: %T", src)
	}
	return nil
}

type NullShareType struct {
	ShareType ShareType `json:"share_type"`
	Valid     bool      `json:"valid"` // Valid is true if ShareType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullShareType) Scan(value interface{}) error {
	if value == nil {
		ns.ShareType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ShareType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullShareType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ShareType), nil
}

type File struct {
	ID             pgtype.UUID        `json:"id"`
	OwnerID        pgtype.UUID        `json:"owner_id"`
	PhysicalFileID pgtype.UUID        `json:"physical_file_id"`
	FolderID       pgtype.UUID        `json:"folder_id"`
	Filename       string             `json:"filename"`
	UploadDate     pgtype.Timestamptz `json:"upload_date"`
	DownloadCount  int32              `json:"download_count"`
	IsOriginal     bool               `json:"is_original"`
}

type Folder struct {
	ID        pgtype.UUID        `json:"id"`
	OwnerID   pgtype.UUID        `json:"owner_id"`
	ParentID  pgtype.UUID        `json:"parent_id"`
	Name      string             `json:"name"`
	Path      string             `json:"path"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	RealPath  string             `json:"real_path"`
}

type PhysicalFile struct {
	ID             pgtype.UUID        `json:"id"`
	ContentHash    string             `json:"content_hash"`
	MimeType       string             `json:"mime_type"`
	SizeBytes      int64              `json:"size_bytes"`
	StoragePath    string             `json:"storage_path"`
	ReferenceCount int32              `json:"reference_count"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}

type Share struct {
	ID               pgtype.UUID        `json:"id"`
	FileID           pgtype.UUID        `json:"file_id"`
	FolderID         pgtype.UUID        `json:"folder_id"`
	ShareType        ShareType          `json:"share_type"`
	OwnerID          pgtype.UUID        `json:"owner_id"`
	SharedWithUserID pgtype.UUID        `json:"shared_with_user_id"`
	PublicToken      pgtype.Text        `json:"public_token"`
	DownloadCount    int32              `json:"download_count"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
}

type User struct {
	ID                pgtype.UUID        `json:"id"`
	Name              string             `json:"name"`
	Email             string             `json:"email"`
	PasswordHash      string             `json:"password_hash"`
	Role              string             `json:"role"`
	StorageQuotaBytes int64              `json:"storage_quota_bytes"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
}
