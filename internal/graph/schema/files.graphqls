scalar Time

type File {
  id: ID!
  filename: String!
  mimeType: String!
  size: Int!
  uploadDate: Time!
}

type Folder {
  id: ID!
  name: String!
  createdAt: Time!
  parentID: ID
  path: String!
  realPath: String!
  childrenFolders: [Folder!]!
  childrenFiles: [File!]!
}

type PreSignedURL {
  filename: String!
  hash: String!
  uploadURL: String!
}

type PreUploadCheckResponse {
  completedFiles: [File!]!
  newFiles: [PreSignedURL!]!
}

type DownloadURL {
  downloadURL: String!
  filename: String!
}

input PreUploadFileInput {
  filename: String!
  folderId: ID
  hash: String!
}

input ConfirmUploadInput {
  filename: String!
  hash: String!
  size: Int!
  mimeType: String!
  folderId: ID
}

type FailedUpload {
  hash: String!
  reason: String!
}

type ConfirmUploadsResponse {
  files: [File!]!
  failedUploads: [FailedUpload!]!
}

extend type Query {
  getFilesInFolder(folderId: ID, publicToken: String): [File!]! @auth
  getFoldersInFolder(folderId: ID, publicToken: String): [Folder!]! @auth
  getFolderDetails(folderId: ID!, publicToken: String): Folder @auth
}

extend type Mutation {
  getDownloadURL(fileId: ID!, publicToken: String): DownloadURL! @auth

  createFolder(name: String!, parentId: ID): Folder! @auth
  deleteFile(fileId: ID!): Boolean! @auth
  deleteFolder(folderId: ID!): Boolean! @auth

  preUploadCheck(files: [PreUploadFileInput!]!): PreUploadCheckResponse! @auth
  confirmUploads(uploads: [ConfirmUploadInput!]!): ConfirmUploadsResponse! @auth
}
