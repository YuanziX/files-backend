scalar Time

type File {
  id: ID!
  filename: String!
  mimeType: String!
  size: Int!
  uploadDate: Time!
}

type Folder {
  id: ID!
  name: String!
  createdAt: Time!
  parentID: ID
  path: String!
  realPath: String!
  childrenFolders: [Folder!]!
  childrenFiles: [File!]!
}

type PreSignedURL {
  filename: String!
  hash: String!
  uploadURL: String!
}

type PreUploadCheckResponse {
  completedFiles: [File!]!
  newFiles: [PreSignedURL!]!
}

type DownloadURL {
  downloadURL: String!
  filename: String!
}

input PreUploadFileInput {
  filename: String!
  folderId: ID
  hash: String!
}

input ConfirmUploadInput {
  filename: String!
  hash: String!
  size: Int!
  mimeType: String!
  folderId: ID
}

type FailedUpload {
  hash: String!
  reason: String!
}

type ConfirmUploadsResponse {
  files: [File!]!
  failedUploads: [FailedUpload!]!
}

enum SortOrder {
  ASC
  DESC
}

enum FileSortField {
  FILENAME
  SIZE
  UPLOAD_DATE
  MIME_TYPE
}

enum FolderSortField {
  NAME
  CREATED_AT
}

input FileSortInput {
  field: FileSortField!
  order: SortOrder!
}

input FolderSortInput {
  field: FolderSortField!
  order: SortOrder!
}

input FileFilterInput {
  filename: String
  mimeType: String
  minSize: Int
  maxSize: Int
  uploadedAfter: Time
  uploadedBefore: Time
}

input FolderFilterInput {
  name: String
  createdAfter: Time
  createdBefore: Time
}

extend type Query {
  getFile(fileId: ID!, publicToken: String): File
  getFilesInFolder(
    folderId: ID
    publicToken: String
    sort: FileSortInput
    filter: FileFilterInput
  ): [File!]!
  getFoldersInFolder(
    folderId: ID
    publicToken: String
    sort: FolderSortInput
    filter: FolderFilterInput
  ): [Folder!]!
  getFolderDetails(folderId: ID!, publicToken: String): Folder
}

extend type Mutation {
  getDownloadURL(fileId: ID!, publicToken: String): DownloadURL! @auth

  createFolder(name: String!, parentId: ID): Folder! @auth
  deleteFile(fileId: ID!): Boolean! @auth
  deleteFolder(folderId: ID!): Boolean! @auth

  preUploadCheck(files: [PreUploadFileInput!]!): PreUploadCheckResponse! @auth
  confirmUploads(uploads: [ConfirmUploadInput!]!): ConfirmUploadsResponse! @auth
}
