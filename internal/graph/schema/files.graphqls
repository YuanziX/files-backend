scalar Time

type File {
  id: ID!
  filename: String!
  mimeType: String!
  size: Int!
  uploadDate: Time!
}

type Folder {
  id: ID!
  name: String!
  createdAt: Time!
  parent: Folder
  childrenFolders: [Folder!]!
  childrenFiles: [File!]!
}

type PreSignedURL {
  filename: String!
  hash: String!
  uploadURL: String!
}

type PreUploadCheckResponse {
  completedFiles: [File!]!
  newFiles: [PreSignedURL!]!
}

input PreUploadFileInput {
  filename: String!
  folderId: ID
  hash: String!
}

input ConfirmUploadInput {
  filename: String!
  hash: String!
  size: Int!
  mimeType: String!
  folderId: ID
}

extend type Query {
  myFiles: [File!]! @auth
  myFolders: [Folder!]! @auth
  folderDetails(folderId: ID!): Folder @auth
}

extend type Mutation {
  preUploadCheck(files: [PreUploadFileInput!]!): PreUploadCheckResponse! @auth
  confirmUploads(uploads: [ConfirmUploadInput!]!): [File!]! @auth
  createFolder(name: String!, parentId: ID): Folder! @auth
  deleteFile(fileId: ID!): Boolean! @auth
}
