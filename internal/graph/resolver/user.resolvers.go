package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/YuanziX/files-backend/internal/auth"
	"github.com/YuanziX/files-backend/internal/database/postgres"
	"github.com/YuanziX/files-backend/internal/graph/generated"
	"github.com/YuanziX/files-backend/internal/graph/model"
	"github.com/YuanziX/files-backend/internal/utils"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"golang.org/x/crypto/bcrypt"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.RegisterUser) (*model.AuthResponse, error) {
	_, err := r.DB.GetUserByEmail(ctx, input.Email)
	if err == nil {
		return nil, fmt.Errorf("user with this email already exists")
	}
	if !errors.Is(err, sql.ErrNoRows) {
		log.Printf("Error checking existing user: %v", err)
		return nil, fmt.Errorf("failed to check existing user: %w", err)
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, fmt.Errorf("failed to hash password: %w", err)
	}

	createdUser, err := r.DB.CreateUser(ctx, postgres.CreateUserParams{
		Name:         input.Name,
		Email:        input.Email,
		PasswordHash: string(hashedPassword),
	})

	if err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	auth.GenerateToken(createdUser.ID.String(), createdUser.Role, r.Cfg.JwtSecret)
	token, err := auth.GenerateToken(createdUser.ID.String(), createdUser.Role, r.Cfg.JwtSecret)
	if err != nil {
		return nil, fmt.Errorf("failed to generate token: %w", err)
	}

	return &model.AuthResponse{
		Token: token,
		User:  &createdUser,
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginUser) (*model.AuthResponse, error) {
	user, err := r.DB.GetUserByEmail(ctx, input.Email)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, fmt.Errorf("invalid email or password")
		}
		return nil, fmt.Errorf("failed to get user by email: %w", err)
	}

	err = bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(input.Password))
	if err != nil {
		return nil, fmt.Errorf("invalid email or password")
	}

	token, err := auth.GenerateToken(user.ID.String(), user.Role, r.Cfg.JwtSecret)
	if err != nil {
		return nil, fmt.Errorf("failed to generate token: %w", err)
	}

	return &model.AuthResponse{
		Token: token,
		User:  &user,
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*postgres.User, error) {
	userIDStr, ok := utils.GetUserID(ctx)
	if !ok {
		return nil, fmt.Errorf("access denied: you must be logged in to view your profile")
	}

	userUUID, err := uuid.Parse(userIDStr)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %w", err)
	}

	dbUser, err := r.DB.GetUserByID(ctx, pgtype.UUID{Bytes: userUUID, Valid: true})
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	return &dbUser, nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *postgres.User) (string, error) {
	return obj.ID.String(), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *postgres.User) (*time.Time, error) {
	return &obj.CreatedAt.Time, nil
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
