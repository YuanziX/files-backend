// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"

	"github.com/YuanziX/files-backend/internal/database/postgres"
)

type AuthResponse struct {
	User  *postgres.User `json:"user"`
	Token string         `json:"token"`
}

type ConfirmUploadInput struct {
	Filename string  `json:"filename"`
	Hash     string  `json:"hash"`
	Size     int32   `json:"size"`
	MimeType string  `json:"mimeType"`
	FolderID *string `json:"folderId,omitempty"`
}

type LoginUser struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Mutation struct {
}

type PreSignedURL struct {
	Filename  string `json:"filename"`
	Hash      string `json:"hash"`
	UploadURL string `json:"uploadURL"`
}

type PreUploadCheckResponse struct {
	CompletedFiles []*postgres.File `json:"completedFiles"`
	NewFiles       []*PreSignedURL  `json:"newFiles"`
}

type PreUploadFileInput struct {
	Filename string  `json:"filename"`
	FolderID *string `json:"folderId,omitempty"`
	Hash     string  `json:"hash"`
}

type Query struct {
}

type RegisterUser struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Role string

const (
	RoleAdmin Role = "admin"
	RoleUser  Role = "user"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
